- Projekt als Parameter abfragen
  - wird dann eingetragen in opal-install.json im Projektnamen
  - Batch-File: setEnv-<project name>

- %USERPROFILE% ist Default für das opal-tools-config Verzeichnis

- Wenn ich multiple Connection Pools verwenden möchte: 
  %USERPROFILE%\opal-tools-config\connpool-project1
  %USERPROFILE%\opal-tools-config\connpool-project2
  %USERPROFILE%\opal-tools-config\setEnv-project1.cmd
  %USERPROFILE%\opal-tools-config\setEnv-project2.cmd

-----------------------------------------------------------------------------
-- new stuff
-----------------------------------------------------------------------------
,p_flow_version=>'&PRODUCT_NAME. 20.2.0.00.20'
set define off
set timing on
set pagesize 50000
set sqlblanklines on
version=#VERSION#
set role all; 


{
  "application": "",
  "patch": "#PARENT_FOLDER_NAME#",
  "author": "#ENV_OPAL_TOOLS_USER_IDENTITY#",
  "referenceId": "",
  "version": "1.0.1",
  "extra": "",
  "connectionMappings": [
    {
      "connectionPoolName": "jri_test",
      "fileRegex": "/sql/.*jri_test.*"
    }
  ],
  "sqlFileRegex": "\\.(sql|pks|pkb|trg)$",
  "registryTargets": [],
  "encodingMappings": [
    {
      "encoding": "UTF-8",
      "fileRegex": "/sql/.*apex.*/.*f*sql",
      "description": "encoding for APEX files is always UTF8"
    },
    {
      "encoding": "UTF-8",
      "fileRegex": "/sql/.*",
      "description": "all other files will get this explicit mapping"
    }
  ],
  "dependencies": [],
  "textReplacements": [
    {
      "fileRegex": ".*",
      "expressions": [
        {"regex": "(,p_flow_version=>')(.*?)(')", "value": "$11.0.0$3"},
        {"regEx": "(,p_flow_version=>')(.*?)(')", "value": ", p_flow_version='2.0.0'"},
        {"regEx": "#VERSION#", "value": "1.0.2"},
        {"regEx": "role", "value": "${version}"}        
      ]
    }
  ]
}



-----------------------------------------------------------------------------
-- Local tests
-----------------------------------------------------------------------------

rm -rf /tmp/project1
# smallest install
./setup.sh -s \
--project-root-dir /tmp/project1 \
--software-dir "\${PROJECT_ROOT}/opal-tools" \
--template-dir "\${PROJECT_ROOT}/patch-template" \
--local-config-dir /tmp/project1/conf-user \
--environment-script /tmp/project1/conf-user/setProjectEnvironment.sh \
--db-source-dir "\${PROJECT_ROOT}/src/sql" \
--patch-dir "\${PROJECT_ROOT}/patches" \
--schemas jri_test test \
--environments dev test \
--environment-colors green yellow \
--export-environment dev \
--file-encoding UTF-8

cd /tmp/project1
. /tmp/project1/conf-user/setProjectEnvironment.sh
export-schema-jri_test-prompt-with-filter.sh 
initialize-patch.sh
mv /tmp/project1/patches/2020/*patch1 /tmp/project1/patches/2020/patch1
cd /tmp/project1/patches/2020/patch1


-----------------------------------------------------------------------------
-- Synopsis
-----------------------------------------------------------------------------

Dietmar Aust has created a set of tools to export database objects into the file system and also to install a patch into a target system (test/production). Both tools are highly flexible and driven by command-line switches. The software is written in Java and leverages SQLcl and DBMS_METADATA. The real magic happens through the generated batch scripts that leverage these command-line tools. It works nicely with Git / Subversion and supports working from the file system / from the DB or a mix of both. 

He has been using these tools for 8 months in multiple projects and the users love it. 
It will be published as an open-source project on GitHub and free to use. 

He believes that it has the potential to increase the efficiency of SQL / PL/SQL and APEX developers significantly. It comes with an approach ... but doesn't force one on you. 

-----------------------------------------------------------------------------
-- Config Files
-----------------------------------------------------------------------------

*) opal-installer.json

{
    "application": "test",
    "patch": "#PARENT_FOLDER_NAME#",
    "author": "#ENV_OPAL_TOOLS_USER_IDENTITY#",
    "version": "1.1.0",
    "connectionMappings": [
      {
        "connectionPoolName": "jri_test",
        "fileRegex": "/sql/.*jri_test.*"
      }
    ],
    "sqlFileRegex": "\\.(sql|pks|pkb|trg)$",
    "waitAfterEachStatement": "true",
    "registryTargets": [{"connectionPoolName":"jri_test", "tablePrefix":"OPAL2"}],
    "encodingMappings": [
      {
        "encoding": "UTF-8",
        "fileRegex": "/sql/.*apex.*/.*f*sql",
        "description": "encoding for APEX files is always UTF8"
      },
      {
        "encoding": "UTF-8",
        "fileRegex": "/sql/.*",
        "description": "all other files will get this explicit mapping"
      }
    ],
    "dependencies": [{"patch": "2020-11-12-test 123"}]
  }

-----------------------------------------------------------------------------
-- Command lines
-----------------------------------------------------------------------------

*) setup

  java de.opal.SetupManager [options...]
  -s (--show-passwords)                            : when prompted for passwords, they will be shown in clear text (Vorgabe: true)
  -h (--help)                                      : display this help page (Vorgabe: false)
  --project-root-dir <directory>                   : Sets the root directory for the installation. Will be used to derive other
                                                     parameters if not set explicitly. This directory is typically the target of a
                                                     GIT or SVN export.
  --software-dir <directory>                       : SW install directory (contains bin and lib directories)
                                                     e.g. ${PROJECT_ROOT}/opal-tools or %PROJECT_ROOT%\opal-tools 
  --template-dir <directory>                       : Patch template directory
                                                     e.g. ${PROJECT_ROOT}/patch-template or %PROJECT_ROOT%\patch-template
  --local-config-dir <directory>                   : Local configuration directory (connection pools, user dependent config),
                                                     typically OUTSIDE of the git tree
                                                     e.g. /local/conf-user or c:\local\conf-user
  --environment-script <directory>                 : Local script to initialize the user environment for this project
                                                     e.g. /local/conf-user/setProjectEnvironment.sh or
                                                     c:\local\conf-user\setProjectEnvironment.cmd
  --db-source-dir <directory>                      : Database source directory (sql, has subdirectories e.g.
                                                     sql/oracle_schema/tables, sql/oracle_schema/packages, etc.)
                                                     e.g. ${PROJECT_ROOT}/src/sql or %PROJECT_ROOT%\src\sql (Vorgabe: )
  --patch-dir <directory>                          : Patch directory (patches, has subdirectories e.g. year/patch_name)
                                                     e.g. ${PROJECT_ROOT}/patches or %PROJECT_ROOT%\patches
  --schemas schema1[,schema2][,schema3]...         : List of database schemas (comma-separated, e.g. hr,scott)
                                                     e.g. schema1,schema2
  --environments env1[,env2][,env3]...             : List of environments (comma-separated, e.g. dev,test,prod)
                                                     e.g. dev,test,prod
  --environment-colors color1[,color2][,color3]... : List of shell colors for the environments (comma-separated, e.g.
                                                     green,yellow,red)
                                                     e.g. green,yellow,red: 
  --export-environment environment                 : Which is your designated developement environment? This is used for the
                                                     export.
                                                     e.g. dev
  --file-encoding file encoding                    : file encoding (e.g. UTF-8 or Cp1252, default is current system encoding)
                                                     e.g. UTF-8


*) opal-export

 -h (--help)                                                : show this help page (Vorgabe: false)
 -v (--version)                                             : show version information (Vorgabe: false)
 --url <jdbc url>                                           : database connection jdbc url,
                                                              e.g.: scott/tiger@localhost:1521:ORCL
 --connection-pool-file <file>                              : connection pool file
                                                              e.g.: connections-dev.json
 --connection-pool-name <connection pool name>              : connection pool name
                                                              e.g.: scott
 --output-dir <directory>                                   : output directory, e.g. '.' or '/u01/project/src/sql'
 --includes <filter1> [<filter2>] ... [n]                   : include filter, e.g.: %XLIB% or *XLIB*
 --include-types <type1> [<type2>] ... [n]                  : include types, e.g.: TABLE PACKAGE
 --excludes <type1> [<type2>] ... [n]                       : exclude filter, e.g.: %AQ$% %SYS_% or
 --exclude-types <type1> [<type2>] ... [n]                  : exclude types, e.g.: JOB
 --include-schemas <schema1> [<schema2>] ... [n]            : schemas to be included, only relevant when connecting as DBA
 --escape-char <escape character>                           : add escape() clause to like queries for selecting objects, e.g. \
                                                              or ~
 --dependent-objects <type>:<deptype1>,<deptype2> ... [n]   : dependent objects, e.g. TABLE:COMMENT,INDEX
 --skip-errors                                              : ORA- errors will not cause the program to abort (Vorgabe: false)
 --skip-export                                              : skip the export, this way only the pre- and post-scripts are run
                                                              (Vorgabe: false)
 --pre-scripts <script> [<script2>] ...                     : script (sqlplus/sqlcl) that is running to initialize the session,
                                                              similar to the login.sql file for sqlplus, e.g. ./login.sql or
                                                              ./init.sql
 --post-scripts <script> [<script2>] ...                    : script (sqlplus/sqlcl) that is running in the end to export custom
                                                              objects, e.g. ./apex.sql
 --silent                                                   : turns off prompts (Vorgabe: false)
 --filename-templates <definition 1> [<definition 2>] [...] : templates for constructing the filename per object type
                                                              e.g.: default:#schema#/#object_type#/#object_name#.sql
                                                              e.g.: package:#schema#/#object_type#/#object_name#.pks
                                                              e.g.: "package body:#schema#/packages/#object_name#.pkb"

                                                              #schema#             - schema name in lower case
                                                              #object_type#        - lower case type name: 'table'
                                                              #object_type_plural# - lower case type name in plural: 'tables'
                                                              #object_name#        - lower case object name
                                                              #SCHEMA#             - upper case schema name
                                                              #OBJECT_TYPE#        - upper case object type name: 'TABLE' or
                                                              'INDEX'
                                                              #OBJECT_TYPE_PLURAL# - upper case object type name in plural:
                                                              'TABLES'
                                                              #OBJECT_NAME#        - upper case object name
 --filename-replace-blanks                                  : replaces blanks in the filename with an _, e.g. PACKAGE
                                                              BODY=>PACKAGE_BODY (Vorgabe: true)
 --script-working-dir <directory>                           : working directory for running sqlcl scripts (-pre and -post), e.g.
                                                              '.' or '/u01/project/src/sql'. The default is the environment
                                                              variable OPAL_TOOLS_SRC_SQL_DIR
 --export-template-dir <directory>                          : directory for object templates, e.g. /u01/project/opal-tools/export-
                                                              templates
 --config-file <file>                                       : configuration file
                                                              e.g.: connections-dev.json
 --parallel-degree <degree>                                  : the database statements are executed in parallel, e.g. 10 (Vorgabe:
                                                              1)

*) opal-install

 -h (--help)                                      : show this help page (Vorgabe: false)
 --connection-pool-file <file>                    : connection pool file
                                                    e.g.: connections-dev.json
 --config-file <file>                             : configuration file
                                                    e.g.: opal-installer.json
 --validate-only                                  : don't execute patch, just validate the files and connection pools (Vorgabe:
                                                    false)
 --mandatory-attributes <attr1> [<attr2>] ... [n] : list of attributes that must not be null,
                                                    e.g. patch author version
 --no-logging                                     : disable writing a logfile (Vorgabe: false)
 --source-list-file <filename>                    : source file name, e.g. SourceFilesReference.conf
 --source-dir <path>                              : path to the source directory, e.g. ../src/sql
 --silent                                         : disable all prompts, non-interactive mode (Vorgabe: false)
 --silent-execution                               : prompt after header information, execute all scripts without prompt.


*) opal-install-copy-source-files

 -h (--help)               : show this help page (Vorgabe: false)
 -v (--version)            : show version information (Vorgabe: false)
 --source-dir <directory>  : source directory, e.g. ../src/sql
 --source-list-file <file> : file that contains the sources to be copied, e.g. SourceFilesCopy.conf
 --target-dir <directory>  : target directory, e.g. ./sql

 *) opal-install-copy-template

 -h (--help)              : show this help page (Vorgabe: false)
 -v (--version)           : show version information (Vorgabe: false)
 --source-dir <directory> : template directory
 --target-dir <directory> : target directory for the patch

 *) opal-install-validate-connection

 -h (--help)    : show this help page (Vorgabe: false)
 -v (--version) : show version information (Vorgabe: false)

-----------------------------------------------------------------------------
-- installation scenarios
-----------------------------------------------------------------------------

# default full install

./setup.sh -s \
--software-dir ${PROJECT_ROOT}/opal-tools \
--template-dir ${PROJECT_ROOT}/patch-template \
--local-config-dir /tmp/project1/conf-user \
--environment-script /tmp/project1/conf-user/setProjectEnvironment.sh \
--db-source-dir ${PROJECT_ROOT}/src/sql \
--patch-dir ${PROJECT_ROOT}/patches \
--schemas jri_test,test \
--environments dev,test,prod \
--environment-colors green,yellow,red \
--export-environment dev \
--file-encoding UTF-8

# smallest install
./setup.sh -s \
--project-root-dir /tmp/project1 \
--software-dir "\${PROJECT_ROOT}/opal-tools" \
--template-dir "\${PROJECT_ROOT}/patch-template" \
--local-config-dir /tmp/project1/conf-user \
--environment-script /tmp/project1/conf-user/setProjectEnvironment.sh \
--db-source-dir "\${PROJECT_ROOT}/src/sql" \
--patch-dir "\${PROJECT_ROOT}/patches" \
--schemas jri_test \
--environments dev \
--environment-colors green \
--export-environment dev \
--file-encoding UTF-8

# smallest install Windows
setup.cmd -s ^
--project-root-dir "c:\Projects\project 1" ^
--software-dir "%PROJECT_ROOT%\opal-tools"
--template-dir "\${PROJECT_ROOT}/patch-template" \
--local-config-dir /tmp/project1/conf-user \
--environment-script /tmp/project1/conf-user/setProjectEnvironment.sh \
--db-source-dir "\${PROJECT_ROOT}/src/sql" \
--patch-dir "\${PROJECT_ROOT}/patches" \
--schemas jri_test \
--environments dev \
--environment-colors green \
--export-environment dev \
--file-encoding UTF-8


# command line in Eclipse
--project-root-dir /tmp/project1
--software-dir "/tmp/project1/opal-tools"
--template-dir /tmp/project1/patch-template
--local-config-dir /tmp/project1/conf-user
--environment-script /tmp/project1/conf-user/setProjectEnvironment.sh
--db-source-dir /tmp/project1/src/sql
--patch-dir /tmp/project1/patches
--schemas jri_test test
--environments dev test
--environment-colors green yellow
--export-environment dev
--file-encoding UTF-8

# 
--project-root-dir /tmp/project1
--schemas jri_test test
--environments dev
--environment-colors green yellow
--export-environment dev
--file-encoding UTF-8


-----------------------------------------------------------------------------
-- considerations for project layouts
-----------------------------------------------------------------------------

src
	sql-manual
		user
			...
	sql-exported
		user
			table

src
	sql
		_scripts (manual)
		user
			table

..\sql-manual\		
sql-exported\it4fm\package => ....
sql-manual\it4fm\package => ....

-----------------------------------------------------------------------------
-- Demo Mac - Preparation / cleanup
-----------------------------------------------------------------------------

*) Switch monitor size to 2560x1080

*) start bash 

gradle installDist
rm -rf /tmp/project1
cd /Users/daust/Dropbox/50.Projects/github/opal-tools/build/install/opal-tools

*) remove patch registry if exists
drop table opal2_installer_details;
drop table opal2_installer_patches;

*) start sql developer and connect to jri_test
drop table opal2_installer_details;
drop table opal2_installer_patches;

SELECT *
  FROM opal2_installer_patches
 ORDER BY pat_id DESC;
    
SELECT *
  FROM opal2_installer_details
 ORDER BY det_id DESC;  


-----------------------------------------------------------------------------
-- Demo Mac
-----------------------------------------------------------------------------

./setup.sh -s --project-root-dir /tmp/project1

- schemas: jri_test
- environments: dev
- colors: green

- connect with proxy user daust[jri_test]
=> wrong password

*) go to project
cd /tmp/project1

*) source environment
. conf-user/setProjectEnvironment.sh

*) validate connection pools
validate-connections.sh

*) correct connection pool
vi /tmp/project1/conf-user/connections-dev.json
validate-connections.sh

*) export schema objects with prompt
export-schema-jri_test-prompt-with-filter.sh

*) export full schema
export-schema-jri_test.sh

"xlib*"
opal2%% "*log*"

*) initialize patch
jira_123

*) copy patch files
vi SourceFilesCopy.conf

# Tables
jri_test/tables => jri_test/040_tables
*log*
xlib*

# Package Headers
jri_test/packages => jri_test/090_packages
xlib*.pks

# Package Bodies
jri_test/packages => jri_test/100_package_bodies
xlib*.pkb

*) create script to alter a table
mkdir sql/jri_test/040_tables

vi sql/jri_test/040_tables/alter_table_dummy.sql

drop table dummy;
create table dummy(id number);
alter table dummy(my_val varchar2(100));

*) validate patch
./2.validate-patch-dev.sh

*) install patch
- add JIRA-123 to ReleaseNotes.txt
- add registryTargets to the patch definition
{ connectionPoolName="jri_test", "tablePrefix": "OPAL2" }
./3.install-patch-dev.sh

*) check patch registry
SELECT *
  FROM opal2_installer_patches
 ORDER BY pat_id DESC;
    
SELECT *
  FROM opal2_installer_details
 ORDER BY det_id DESC;    

*) check logfile

-----------------------------------------------------------------------------
-- Continue on WINDOWS - preparation
-----------------------------------------------------------------------------

set FILE=opal-tools-2.4.1-sqlcl-20.3.0

cd c:\
rm -Rf c:\Projects
mkdir c:\Projects

cp z:\%FILE%.zip c:\Projects
cp z:\ProjectStructure.zip c:\Projects
cd c:\Projects

unzip c:\Projects\ProjectStructure.zip
mv c:\Projects\ProjectStructure "c:\Projects\project 1"

unzip c:\Projects\opal-tools*.zip

cd c:\Projects\%FILE%

-----------------------------------------------------------------------------
-- Continue on WINDOWS
-----------------------------------------------------------------------------

*) actual project setup  

setup.cmd -s ^
--project-root-dir "c:\Projects\project 1" ^
--software-dir "%PROJECT_ROOT%\00.ProjectStandards\opal-tools" ^
--template-dir "%PROJECT_ROOT%\00.ProjectStandards\Patch-Template" ^
--local-config-dir "c:\Projects\conf-user" ^
--environment-script "c:\Projects\conf-user\setProject1.cmd" ^
--db-source-dir "%PROJECT_ROOT%\40.Implementation\Sources\sql" ^
--patch-dir "%PROJECT_ROOT%\40.Implementation\Patches" ^
--schemas jri_test test ^
--environments dev test prod ^
--environment-colors green yellow red ^
--export-environment dev ^
--file-encoding UTF-8

*) move files from \bin directory into 40.Implementation ...

*) export schema

*) initialize patch jri-123

*) reference files from source tree

# Tables
jri_test/tables => jri_test/040_tables
*log*
xlib*

# Package Headers
jri_test/packages => jri_test/090_packages
xlib*.pks

# Package Bodies
jri_test/packages => jri_test/100_package_bodies
xlib*.pkb

*) validate test
- add registryTargets to the patch definition
{ connectionPoolName="jri_test", "tablePrefix": "OPAL2" }
- run 2.validate-patch-test.cmd

*) install prod

*) check patch registry
select *
  from opal2_installer_patches
 ORDER BY pat_id DESC;
    
SELECT *
  FROM opal2_installer_details
 ORDER BY det_pat_id desc, det_id;   
 
*) use different directories for the installer
- sql/010_jri_test
- sql/020_test
- sql/030_jri_test
 
*) export apex application

*) export ords module

-----------------------------------------------------------------------------
-- Windows - sample simple
-----------------------------------------------------------------------------

set FILE=opal-tools-2.4.1-sqlcl-20.3.0

cd c:\
rm -Rf c:\Projects
mkdir c:\Projects

cp z:\%FILE%.zip c:\Projects
cp z:\ProjectStructure.zip c:\Projects
cd c:\Projects

REM unzip c:\Projects\ProjectStructure.zip
REM mv c:\Projects\ProjectStructure "c:\Projects\project 1"

unzip c:\Projects\%FILE%.zip

cd c:\Projects\%FILE%

*) show command line options
setup.cmd -h

*) basic setup into directory "c:\Projects\basic"
setup.cmd -s --project-root-dir "c:\Projects\basic"

- schemas: jri_test
- environments: dev
- colors: green

- connect with user daust[jri_test]

*) show all generated files?

*) run bin\export-schema-jri_test.cmd to export all objects, explain parameters

*) run bin\export-schema-jri_test-prompt-with-filter.cmd 
"xlib*"
opal2%% "*log*"

*) initialize patch
jira_123

*) copy patch files
- add packages to PatchFiles.txt
- run 1.copy-patch-files.cmd

*) validate patch
- run 2.validate-patch-dev.cmd

*) remove patch registry if exists
drop table opal2_installer_details;
drop table opal2_installer_patches;

*) install patch
- add JIRA-123 to ReleaseNotes.txt
- add registryTargets to the patch definition
{ connectionPoolName="jri_test", "tablePrefix": "OPAL2" }
- run 3.install-patch-dev.cmd

*) check patch registry
SELECT *
  FROM opal2_installer_patches
 ORDER BY pat_id DESC;
    
SELECT *
  FROM opal2_installer_details
 ORDER BY det_pat_id desc, det_id;     

*) check logfile

*) change passwords in connection pool
- set wrong password
- validate connection pool
- correct password
- validate connection pool
  
--------------------------------------------------------------------------------------------- 
 
*) sample layout, distinction between generated/exported sources and manually created sources

----
src
	sql-manual
		user
			...
	sql-exported
		user
			table

src
	sql
		_scripts (manual)
		user
			table
		
..\sql-manual\		
sql-exported\it4fm\package => ....
sql-manual\it4fm\package => ....

															  
cd /d c:\Projects\opal-installer\sql

-- cleanup 
rm -rf apex jri_test

# calling it without parameters will show usage
opal-export.cmd

# export all everything 
# will raise errors, no specific dbms_metadata parameters set
# the bare default
opal-export.cmd ^
    -url jri_test/oracle1@vm1:1521:xe ^
    -o . 

# skip errors 
opal-export.cmd ^
    -url jri_test/oracle1@vm1:1521:xe ^
    -o . ^
    --skip-errors

# exclude all SYS_% objects
opal-export.cmd ^
    -url jri_test/oracle1@vm1:1521:xe ^
    -o . ^
    --skip-errors ^
    -e SYS_%

# export all xlib entries into the current directory and subdirectories
# table files also contain comments and indexes
opal-export.cmd ^
    -url jri_test/oracle1@vm1:1521:xe ^
    -o . ^
    -i XLIB% ^
    -d table:comment,index

# initialize environment with init.sql
opal-export.cmd ^
    -url jri_test/oracle1@vm1:1521:xe ^
    --output-dir . ^
    --include XLIB% ^
    --init-file ./init.sql 

# specify dependent objects
# http://download.oracle.com/docs/cd/B19306_01/appdev.102/b14258/d_metada.htm#BGBIEDIA
opal-export.cmd ^
    -url jri_test/oracle1@vm1:1521:xe ^
    --output-dir . ^
    --include XLIB% ^
    --dependent-objects table:comment,index,object_grant,trigger view:comment,object_grant "materialized view:comment,index,materialized_view_log,object_grant" ^
    --init-file ./init.sql 


# run custom apex export 
# specify dependent objects
# initialize environment with init.sql
# run custom apex export
opal-export.cmd ^
    -url jri_test/oracle1@vm1:1521:xe ^
    --output-dir . ^
    --include XLIB% ^
    --dependent-objects table:comment,index,object_grant,trigger view:comment,object_grant "materialized view:comment,index,materialized_view_log,object_grant" ^
    --init-file ./init.sql ^
    --custom-file ./apex-export.sql

# restrict export to VIEWs only
opal-export.cmd ^
    -url jri_test/oracle1@vm1:1521:xe ^
    --output-dir . ^
    --dependent-objects table:comment,index,object_grant,trigger view:comment,object_grant "materialized view:comment,index,materialized_view_log,object_grant" ^
    --init-file ./init.sql ^
    --custom-file ./apex-export.sql ^
    --include-types VIEW

# export all xlib entries from multiple schemas
# table files also contain comments and indexes
# run custom apex export 
# MUST CONNECT AS DBA
# Filter must change from XLIB% => %XLIB% because we are now comparing <schema>.<object_name> with <include filter>
opal-export.cmd ^
    -url system/oracle1@vm1:1521:xe ^
    --output-dir . ^
    --include %XLIB_LOG% ^
    --dependent-objects table:comment,index,object_grant,trigger ^
    --init-file ./init.sql ^
    --custom-file ./apex-export.sql ^
    --schemas training test jri_test ^
    --include-types table

opal-export.cmd ^
    -url system/oracle1@vm1:1521:xe ^
    --output-dir . ^
    --include JRI_TEST.XLIB_LOG% TEST.XLIB_LOG% ^
    --dependent-objects table:comment,index,object_grant,trigger ^
    --init-file ./init.sql ^
    --custom-file ./apex-export.sql ^
    --schemas training test jri_test ^
    --include-types table

